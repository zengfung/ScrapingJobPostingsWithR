library(XML)
library(RCurl)
###
#To be deleted after testing
###
# go to page of cybercoders.com for search results
url = "https://www.monster.com/jobs/search/"
search = "data scientist"
doc = htmlParse(getForm(url, q = search))
url.exists(url)
library(XML)
library(RCurl)
install.packages("RCurl")
install.packages("XML")
library(XML)
library(RCurl)
install.packages("bitops")
library(RCurl)
###
#To be deleted after testing
###
# go to page of cybercoders.com for search results
url = "https://www.monster.com/jobs/search/"
search = "data scientist"
doc = htmlParse(getForm(url, q = search))
opts <- list(
proxy         = "https://*******",
proxyusername = "*****",
proxypassword = "*****",
proxyport     = 8080
)
opts <- list(
proxy         = "https://*******",
proxyusername = "*****",
proxypassword = "*****",
proxyport     = 8080
)
url.exists(url, .opts = opts)
url = "https://www.monster.com"
url.exists(url)
library(RCurl)
url.exists(url)
htmlParse(url)
library(XML)
htmlParse(url)
htmlParse("https://www.monster.com/")
htmlParse(getURL("https://www.monster.com/"))
content(GET(url))
GET(url)
library(httr)
GET(url)
content(GET(url))
install.packages("xml2")
content(GET(url))
url = "https://www.monster.com/jobs/search/?q=data-scientist&intcid=skr_navigation_nhpso_searchMainPrefill&stpage=1&page=7"
content(GET(url))
url.exists(myurl, useragent="curl/7.39.0 Rcurl/1.95.4.5")
url.exists(url, useragent="curl/7.39.0 Rcurl/1.95.4.5")
getOption(HTTPUserAgent)
getOption("HTTPUserAgent")
curlVersion()$protocols
library(XML)
library(RCurl)
library(httr)
myurl = "https://www.monster.com/jobs/search/?page=2"
GET(myurl, query = list(q = "data scientist"))
tt = GET(myurl, query = list(q = "data scientist"))
doc = htmlParse(tt)
results = getNodeSet(doc, "//section[@class='card-content ']")
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2"), trim = TRUE)
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='location']//span[@class='name']"), trim = TRUE)
jobCompany = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='company']//span[@class='name']"), trim = TRUE)
###
#To be deleted after testing
###
# go to page of cybercoders.com for search results
url = "https://www.monster.com"
p = "/jobs/search/"
search = "data scientist"
doc = htmlParse(GET(url, path = p, query = list(q = search, where = "united states")))
results = getNodeSet(doc, "//section[@class='card-content ']")
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2"), trim = TRUE)
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='location']//span[@class='name']"), trim = TRUE)
jobCompany = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='company']//span[@class='name']"), trim = TRUE)
jobURL = xpathSApply(firstResult, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2//a", xmlGetAttr, "href")
jobLink = htmlParse(GET(jobURL))
jobDescription = xpathSApply(jobLink, "//div[@id='JobDescription']", xmlValue)
getNodeSet(jobLink, "div[@id='JobDescription']")
getNodeSet(jobLink, "//div[@id='JobDescription']")
search = "data analyst"
doc = htmlParse(GET(url, path = p, query = list(q = search, where = "united states")))
results = getNodeSet(doc, "//section[@class='card-content ']")
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2"), trim = TRUE)
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='location']//span[@class='name']"), trim = TRUE)
jobCompany = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='company']//span[@class='name']"), trim = TRUE)
jobURL = xpathSApply(firstResult, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2//a", xmlGetAttr, "href")
jobLink = htmlParse(GET(jobURL))
jobDescription = xpathSApply(jobLink, "//div[@id='JobDescription']", xmlValue)
jobDescription = xpathSApply(jobLink, "//div[@id='card-content']", xmlValue)
jobDescription = xpathSApply(jobLink, "//div[@class='card-content']", xmlValue)
getNodeSet(jobLink, "//div[@class='card-content']")
getNodeSet(jobLink, "//div[@id='JobBody]")
getNodeSet(jobLink, "//div[@id='JobBody']")
jobURL
getNodeSet(jobLink, "//section[@class='card-content']")
getNodeSet(jobLink, "//div")
getNodeSet(jobLink, "//div[@class='row]")
getNodeSet(jobLink, "//div[@class='row']")
getNodeSet(jobLink, "//section")
getNodeSet(jobLink, "//div[@id='JobBody']")
getNodeSet(jobLink, "//div[@id]")
getNodeSet(jobLink, "//div[@class='job-description']")
tt = getNodeSet(jobLink, "//div[@class='job-description']")
xmlChildren(tt[[1]])
xmlChildren(tt[[1]])
# function to get data
getJobInfo = function(result){
jobTitle = xmlValue(getNodeSet(result, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2"), trim = TRUE)
jobURL = xpathSApply(result, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2//a", xmlGetAttr, "href")
jobLink = suppressMessages(htmlParse(GET(jobURL)))
jobLocation = xmlValue(getNodeSet(result, ".//div[@class='flex-row']//div[@class='summary']//div[@class='location']//span[@class='name']"), trim = TRUE)
jobCompany = xmlValue(getNodeSet(result, ".//div[@class='flex-row']//div[@class='summary']//div[@class='company']//span[@class='name']"), trim = TRUE)
return(list(title = jobTitle,
source = "monster.com",
company = jobCompany,
location = jobLocation,
link = jobURL))
# jobTypeAndSalary = xmlValue(getNodeSet(result, ".//div[@class='details']//div[@class='wage']"))
# jobType = ifelse(jobTypeAndSalary != "Compensation Unspecified",
#                  regmatches(jobTypeAndSalary, gregexpr("^[[:alpha:]-]+", jobTypeAndSalary)[[1]]),
#                  NA)
# jobSalary = ifelse(jobTypeAndSalary != "Compensation Unspecified",
#                    regmatches(jobTypeAndSalary, gregexpr("[$].+$", jobTypeAndSalary)[[1]]),
#                    NA)
# jobDescription = xmlValue(getNodeSet(result, ".//div[@class='description']"))
# jobSkills = xmlValue(getNodeSet(result, ".//div[@class='skills']//ul[@class='skill-list']//li[@class='skill-item']//a//span[@class='skill-name']"))
# jobIntro = xmlValue(getNodeSet(jobLink, "//div[@class='job-details span9']//div[@class='section-data']"))
# jobDetailsNode = getNodeSet(jobLink, "//div[@class='job-details span9']//div[@class='section-data section-data-title']")
# jobDetails = lapply(jobDetailsNode, function(node) {
#   sapply(node[names(node)=="text"], xmlValue, trim = TRUE)
# })
# jobDetails = sapply(jobDetails, function(details){
#   paste(details, collapse="\n")
# })
# if (length(jobDetails) > 0){
#   names(jobDetails) = xmlValue(getNodeSet(jobLink, "//div[@class='job-details span9']//h4[@class='section-title']"))
# }
# jobRequirements = ifelse(is.null(jobDetails["What You Need for this Position"][[1]]),
#                          NA, jobDetails["What You Need for this Position"][[1]])
# jobResponsibilities = ifelse(is.null(jobDetails["What You Will Be Doing"][[1]]),
#                              NA, jobDetails["What You Will Be Doing"][[1]])
# jobBenefits = ifelse(is.null(jobDetails["What's In It for You"][[1]]),
#                      NA, jobDetails["What's In It for You"][[1]])
# return (list(title = jobTitle,
#              source = "cybercoders.com",
#              company = "CyberCoders",
#              location = jobLocation,
#              employmentType = jobType,
#              salary = jobSalary,
#              responsibilities = jobResponsibilities,
#              requiredSkills = jobRequirements,
#              preferredSkills = paste(jobSkills, collapse = "\n"),
#              benefits = jobBenefits,
#              #intro = jobIntro,
#              link = jobURL,
#              description = jobDescription))
}
# function to get data for different searches
getJobPostings = function(search){
url = "https://www.monster.com"
p = "/jobs/search/"
doc = htmlParse(GET(url, path = p, query = list(q = search, where = "united states", stpage = "1", page = "10")))
# get all search results
results = getNodeSet(doc, "//section[@class='card-content ']")
jobListings = lapply(results, getJobInfo)
# remove "rows" that contains NA (extracted ads from website)
checkRows = sapply(jobListings, function(x) x$title)
return(jobListings[!is.na(checkRows)])
}
searches = c("data scientist", "data analyst", "statistician")
# obtain all search results
jobListings = sapply(searches, getJobPostings)
print(sapply(jobListings, length))
fullJobListing = c(jobListings[[1]], jobListings[[2]], jobListings[[3]])
df = data.frame(matrix(unlist(fullJobListing), nrow=length(fullJobListing), byrow=T))
names(df) = names(fullJobListing[[1]])
View(df)
table(df$source)
###
#To be deleted after testing
###
# go to page of cybercoders.com for search results
url = "https://www.careerbuilder.com"
p = "jobs"
search = "data scientist"
doc = htmlParse(GET(url, path = p, query = list(keywords = search)))
results = getNodeSet(doc, "//div[@class='data-results-content-parent relative']")
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']"), trim = TRUE)
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
firstResult = results[[2]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
xpathSApply(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']", xmlValue)
GET(url, path = p, query = list(keywords = search))
search = "data+scientist"
GET(url, path = p, query = list(keywords = search))
results = getNodeSet(doc, "//div[@class='data-results-content-parent relative']")
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='location']//span[@class='name']"), trim = TRUE)
search = "data scientist"
doc = htmlParse(GET(url, path = p, query = list(keywords = search)))
results = getNodeSet(doc, "//div[@class='data-results-content-parent relative']")
firstResult = results[[1]]
length(results)
doc = htmlParse(GET(url, path = p, query = list(keywords = search)))
results = getNodeSet(doc, "//div[@class='data-results-content-parent relative']")
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
doc = htmlParse(GET(url, path = p, query = list(keywords = search, page_number = "1")))
results = getNodeSet(doc, "//div[@class='data-results-content-parent relative']")
firstResult = results[[1]]
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='flex-row']//div[@class='summary']//div[@class='location']//span[@class='name']"), trim = TRUE)
jobLocation = xmlValue(getNodeSet(firstResult, ".///div[@class='col big col-mobile-inline']//div[@class='data-details']"), trim = TRUE)
jobTitle = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
getNodeSet(firstResult, ".///div[@class='col big col-mobile-inline']//div[@class='data-details']")
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']"), trim = TRUE)
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']"))
getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']")
tt = getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']")
xpathSApply(tt[[1]], ".//", xmlValue)
xpathSApply(tt[[1]], ".//*", xmlValue)
primaryResult = xpathSApply(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']", xmlValue)
primaryResult = xpathSApply(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']//*", xmlValue)
jobLocation = xmlValue(getNodeSet(firstResult, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']//*"), trim = TRUE)
jobURL = xpathSApply(firstResult, ".//a[class='data-results-content block job-listing-item']", xmlGetAttr, "href")
jobURL = xpathSApply(firstResult, ".//a[@class='data-results-content block job-listing-item']", xmlGetAttr, "href")
jobLink = htmlParse(GET(url, path = jobURL))
GET(url, path = jobURL)
jobURL = paste0(url, xpathSApply(firstResult, ".//a[@class='data-results-content block job-listing-item']", xmlGetAttr, "href"))
jobLink = htmlParse(GET(jobURL))
getNodeSet(jobLink, "div[@class='bloc']")
getNodeSet(jobLink, "div[@class='col-2']")
getNodeSet(jobLink, "text()[contains(.,'Recommended')]")
jobURL
getNodeSet(jobLink, "//div[@class='col-2']")
getNodeSet(jobLink, "//div[@class='bloc']")
getNodeSet(jobLink, "//div[@class='bloc']//h4[@class='dark-blue-text pb']")
getNodeSet(jobLink, "//div[@class='bloc']//h4[@class='dark-blue-text pb']/..//div")
jobPreferredSkills = xpathSApply(jobLink, "//div[@class='bloc']//h4[@class='dark-blue-text pb']/..//div", xmlValue)
jobDescription = xpathSApply(jobLink, "//div[@class='col big col-mobile-full']//p", xmlValue)
jobDescrop
jobDescription[1]
paste(jobPreferredSkills)
paste(jobPreferredSkills, collapse="\n")
# function to get data
getJobInfo = function(result){
jobTitle = xmlValue(getNodeSet(result, ".//div[@class='col big col-mobile-inline']//div[@class='data-results-title dark-blue-text b']"), trim = TRUE)
primaryResult = xpathSApply(result, ".//div[@class='col big col-mobile-inline']//div[@class='data-details']//*", xmlValue)
jobLocation = primaryResult[2]
jobCompany = primaryResult[1]
jobEmploymentType = primaryResult[3]
jobURL = paste0(url, xpathSApply(result, ".//a[@class='data-results-content block job-listing-item']", xmlGetAttr, "href"))
jobLink = htmlParse(GET(jobURL))
jobDescription = xpathSApply(jobLink, "//div[@class='col big col-mobile-full']//p", xmlValue)
jobPreferredSkills = xpathSApply(jobLink, "//div[@class='bloc']//h4[@class='dark-blue-text pb']/..//div", xmlValue)
return(list(title = jobTitle,
source = "careerbuilder.com",
company = jobCompany,
location = jobLocation,
employmentType = jobEmploymentType,
preferredSkills = paste(jobPreferredSkills, collapse="\n"),
description = paste(jobDescription, collapse = "\n"),
link = jobURL))
# jobTypeAndSalary = xmlValue(getNodeSet(result, ".//div[@class='details']//div[@class='wage']"))
# jobType = ifelse(jobTypeAndSalary != "Compensation Unspecified",
#                  regmatches(jobTypeAndSalary, gregexpr("^[[:alpha:]-]+", jobTypeAndSalary)[[1]]),
#                  NA)
# jobSalary = ifelse(jobTypeAndSalary != "Compensation Unspecified",
#                    regmatches(jobTypeAndSalary, gregexpr("[$].+$", jobTypeAndSalary)[[1]]),
#                    NA)
# jobDescription = xmlValue(getNodeSet(result, ".//div[@class='description']"))
# jobSkills = xmlValue(getNodeSet(result, ".//div[@class='skills']//ul[@class='skill-list']//li[@class='skill-item']//a//span[@class='skill-name']"))
# jobIntro = xmlValue(getNodeSet(jobLink, "//div[@class='job-details span9']//div[@class='section-data']"))
# jobDetailsNode = getNodeSet(jobLink, "//div[@class='job-details span9']//div[@class='section-data section-data-title']")
# jobDetails = lapply(jobDetailsNode, function(node) {
#   sapply(node[names(node)=="text"], xmlValue, trim = TRUE)
# })
# jobDetails = sapply(jobDetails, function(details){
#   paste(details, collapse="\n")
# })
# if (length(jobDetails) > 0){
#   names(jobDetails) = xmlValue(getNodeSet(jobLink, "//div[@class='job-details span9']//h4[@class='section-title']"))
# }
# jobRequirements = ifelse(is.null(jobDetails["What You Need for this Position"][[1]]),
#                          NA, jobDetails["What You Need for this Position"][[1]])
# jobResponsibilities = ifelse(is.null(jobDetails["What You Will Be Doing"][[1]]),
#                              NA, jobDetails["What You Will Be Doing"][[1]])
# jobBenefits = ifelse(is.null(jobDetails["What's In It for You"][[1]]),
#                      NA, jobDetails["What's In It for You"][[1]])
# return (list(title = jobTitle,
#              source = "cybercoders.com",
#              company = "CyberCoders",
#              location = jobLocation,
#              employmentType = jobType,
#              salary = jobSalary,
#              responsibilities = jobResponsibilities,
#              requiredSkills = jobRequirements,
#              preferredSkills = paste(jobSkills, collapse = "\n"),
#              benefits = jobBenefits,
#              #intro = jobIntro,
#              link = jobURL,
#              description = jobDescription))
}
# function to get data for different searches
getJobPostings = function(search){
url = "https://www.careerbuilder.com"
p = "jobs"
doc = htmlParse(GET(url, path = p, query = list(q = search, where = "united states", stpage = "1", page = "10")))
# get all search results
results = getNodeSet(doc, "//div[@class='data-results-content-parent relative']")
jobListings = lapply(results, getJobInfo)
# remove "rows" that contains NA (extracted ads from website)
checkRows = sapply(jobListings, function(x) x$title)
return(jobListings[!is.na(checkRows)])
}
searches = c("data scientist", "data analyst", "statistician")
# obtain all search results
jobListings = sapply(searches, getJobPostings)
print(sapply(jobListings, length))
fullJobListing = c(jobListings[[1]], jobListings[[2]], jobListings[[3]])
df = data.frame(matrix(unlist(fullJobListing), nrow=length(fullJobListing), byrow=T))
names(df) = names(fullJobListing[[1]])
View(df)
View(fullJobListing)
View(jobListings)
# function to get data
getJobInfo = function(result){
jobTitle = xmlValue(getNodeSet(result, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2"), trim = TRUE)
jobURL = xpathSApply(result, ".//div[@class='flex-row']//div[@class='summary']//header[@class='card-header']//h2//a", xmlGetAttr, "href")
jobLink = suppressMessages(htmlParse(GET(jobURL)))
jobLocation = xmlValue(getNodeSet(result, ".//div[@class='flex-row']//div[@class='summary']//div[@class='location']//span[@class='name']"), trim = TRUE)
jobCompany = xmlValue(getNodeSet(result, ".//div[@class='flex-row']//div[@class='summary']//div[@class='company']//span[@class='name']"), trim = TRUE)
return(list(title = jobTitle,
source = "monster.com",
company = jobCompany,
location = jobLocation,
link = jobURL))
# jobTypeAndSalary = xmlValue(getNodeSet(result, ".//div[@class='details']//div[@class='wage']"))
# jobType = ifelse(jobTypeAndSalary != "Compensation Unspecified",
#                  regmatches(jobTypeAndSalary, gregexpr("^[[:alpha:]-]+", jobTypeAndSalary)[[1]]),
#                  NA)
# jobSalary = ifelse(jobTypeAndSalary != "Compensation Unspecified",
#                    regmatches(jobTypeAndSalary, gregexpr("[$].+$", jobTypeAndSalary)[[1]]),
#                    NA)
# jobDescription = xmlValue(getNodeSet(result, ".//div[@class='description']"))
# jobSkills = xmlValue(getNodeSet(result, ".//div[@class='skills']//ul[@class='skill-list']//li[@class='skill-item']//a//span[@class='skill-name']"))
# jobIntro = xmlValue(getNodeSet(jobLink, "//div[@class='job-details span9']//div[@class='section-data']"))
# jobDetailsNode = getNodeSet(jobLink, "//div[@class='job-details span9']//div[@class='section-data section-data-title']")
# jobDetails = lapply(jobDetailsNode, function(node) {
#   sapply(node[names(node)=="text"], xmlValue, trim = TRUE)
# })
# jobDetails = sapply(jobDetails, function(details){
#   paste(details, collapse="\n")
# })
# if (length(jobDetails) > 0){
#   names(jobDetails) = xmlValue(getNodeSet(jobLink, "//div[@class='job-details span9']//h4[@class='section-title']"))
# }
# jobRequirements = ifelse(is.null(jobDetails["What You Need for this Position"][[1]]),
#                          NA, jobDetails["What You Need for this Position"][[1]])
# jobResponsibilities = ifelse(is.null(jobDetails["What You Will Be Doing"][[1]]),
#                              NA, jobDetails["What You Will Be Doing"][[1]])
# jobBenefits = ifelse(is.null(jobDetails["What's In It for You"][[1]]),
#                      NA, jobDetails["What's In It for You"][[1]])
# return (list(title = jobTitle,
#              source = "cybercoders.com",
#              company = "CyberCoders",
#              location = jobLocation,
#              employmentType = jobType,
#              salary = jobSalary,
#              responsibilities = jobResponsibilities,
#              requiredSkills = jobRequirements,
#              preferredSkills = paste(jobSkills, collapse = "\n"),
#              benefits = jobBenefits,
#              #intro = jobIntro,
#              link = jobURL,
#              description = jobDescription))
}
# function to get data for different searches
getJobPostings = function(search){
url = "https://www.monster.com"
p = "/jobs/search/"
doc = htmlParse(GET(url, path = p, query = list(q = search, where = "united states", stpage = "1", page = "10")))
# get all search results
results = getNodeSet(doc, "//section[@class='card-content ']")
jobListings = lapply(results, getJobInfo)
# remove "rows" that contains NA (extracted ads from website)
checkRows = sapply(jobListings, function(x) x$title)
return(jobListings[!is.na(checkRows)])
}
searches = c("data scientist", "data analyst", "statistician")
# obtain all search results
jobListings = sapply(searches, getJobPostings)
